'use client'
import type { Metadata } from "next";
import "./globals.css";
import Image from 'next/image';
import header from './images/header-banner.jpg';
import { ButtonLink } from "./components/button";
import Link from "next/link";
import axios from 'axios';
import { useEffect, useState } from 'react';


const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const [validation, setValidation] = useState(false);

  function getCookie(name: string): string | null {
    if (typeof document === 'undefined') return null; // Check if document is defined
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      // Check if this is the cookie we're looking for
      if (cookie.startsWith(name + '=')) {
        return cookie.substring(name.length + 1);
      }
    }
    return null;
  }

  const email = getCookie('email') || '';
  const token = getCookie('token') || '';


  // Function to make validation API call
  const validationCall = async (email:string,token:string) => {
    try {
      const payload={email: email, token: token, action: "validate"}
      const res = await axios.post('http://driver-db.rf.gd/services', payload);
      if (res.data.status) {
        setValidation(true);
        window.location.href = '/home';
      } else {
        console.log("Validation failed");
      }
    } catch (error) {
      console.error("Error occurred during validation:", error);
    }
  }

  useEffect(() => {
    validationCall(email, token);
  }, []);

  return (

    <html lang="en">
    <body className="bg-gray-100">

    <div className="flex flex-col min-h-screen">
      <div className="flex justify-between bg-blue-500 text-white">
        <div>
          <Image src={header} alt="sky" style={{ marginTop: '-130px' }} />
        </div>
      </div>

      <div className='flex justify-between'>
        {/* Render buttons conditionally based on validation state */}
        {validation && (
          <div className='flex-1/3 flex flex-col p-4 bg-gray-300 h-screen'>
            <Link href="registerCar">
              <ButtonLink btnText='Register Car' className='mb-1 w-64 h-10' />
            </Link>
            <Link href="registerUser">
              <ButtonLink btnText='Register User' className='mb-1 w-64 h-10' />
            </Link>
            <Link href="cars">
              <ButtonLink btnText='Cars' className='mb-1 w-64 h-10' />
            </Link>
            <Link href="users">
              <ButtonLink btnText='Users' className='mb-1 w-64 h-10' />
            </Link>
          </div>
        )}

        <div className="flex flex-1">
          <div className="flex-1 bg-gray-100 min-h-screen">
            {children}
          </div>
        </div>
      </div>
    </div>
    </body>
    </html>
  );
}
